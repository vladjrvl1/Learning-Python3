class Vector:
    MIN_COORD = 0
    MAX_COORD = 100

    def setCoords(self, x, y):
        """ Если нам нужен метод, который бы «работал» с атрибутами экземпляров классов, то это однозначно
        обычный метод класса с первым параметром self, который указывает на текущий объект."""
        if Vector.validate(x) and Vector.validate(y):
            self.x = x
            self.y = y

    @classmethod
    def validate(cls, arg):
        """ Если нужен метод, который можно вызывать непосредственно из класса (или экземпляра) и, который бы имел
        доступ к свойствам и методам этого класса,то его следует объявить как метод класса через декоратор @classmethod
        """
        if cls.MIN_COORD <= arg <= cls.MAX_COORD:
            return True
        return False

    @staticmethod
    def norm2(x, y):
        """Если нужен метод, который можно вызывать непосредственно из класса, но доступ к его атрибутам
        не предполагается, то достаточно его объявить как статический через декоратор @staticmethod."""
        return x * x + y * y


class Robot:
    """  Создайте класс Robot, у которого есть:
    атрибут класса population. В этом атрибуте будет хранится общее количество роботов, изначально принимает значение 0;
    конструктор __init__, принимающий 1 аргумент name. Данный метод должен сохранять атрибут name и печатать сообщение
    вида "Робот <name> был создан". Помимо инициализации робота данный метод должен увеличивать популяцию
    роботов на единицу;
    метод destroy, должен уменьшать популяцию роботов на единицу и печатать сообщение вида "Робот <name> был уничтожен"
    метод say_hello, которой печатает сообщение вида "Робот <name> приветствует тебя, особь человеческого рода"
    метод класса  how_many, который печатает сообщение вида "<population>, вот сколько нас еще осталось"""

    population = 0

    def __init__(self, name):
        self._name = name
        Robot.population += 1
        print("Робот", self._name, 'был создан')

    def destroy(self):
        Robot.population -= 1
        print("Робот", self._name, 'был уничтожен')

    def say_hello(self):
        print(f"Робот {self._name} приветствует тебя, особь человеческого рода")

    @classmethod
    def how_many(cls):
        print(f"{cls.population}, вот сколько нас еще осталось")
