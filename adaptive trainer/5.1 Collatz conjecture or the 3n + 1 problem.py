"""
Напишите функцию, которая для заданного натурального числа n генерирует последовательность чисел, описанную в
гипотезе Коллатца:
Если n четное, то делим его пополам, если нечётное, то умножаем на 3 и прибавляем 1. С итогом вычисления снова
проделываем эту операцию до тех пор, пока в результате не будет получено число 1.

Например, для числа n = 17 последовательность вычислений выглядит следующим образом:
17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1

Предполагается, что подобная последовательность остановится на числе 1 для любого начального натурального числа n.

Формат ввода:
Строка, содержащая единственное целое число nn, n > 0n>0.

Формат вывода:
Строка, содержащая последовательность целых чисел, разделённых пробелом.

Sample Input 1:

17
Sample Output 1:

17 52 26 13 40 20 10 5 16 8 4 2 1
Sample Input 2:

1
Sample Output 2:

1
"""


def collatz_sequence(num: int) -> list:
    """ Если num четное, то делим его пополам, если нечётное, то умножаем на 3 и прибавляем 1. С итогом вычисления снова
проделываем эту операцию до тех пор, пока в результате не будет получено число 1."""
    if num == 0:
        raise ValueError("Argument must be integer > 0")
    sequence = [num]
    while num != 1:
        if num % 2 == 0:
            num = num / 2
        else:
            num = num * 3 + 1
        sequence.append(int(num))
    return sequence


print(*collatz_sequence(5))


def collatz_sequence_gen(num: int):
    yield num
    while num != 1:
        if num % 2 == 0:
            num = num / 2
        else:
            num = num * 3 + 1
        yield int(num)


print(collatz_sequence_gen(5))
print(list(collatz_sequence_gen(5)))